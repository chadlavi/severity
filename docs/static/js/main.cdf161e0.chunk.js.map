{"version":3,"sources":["App.tsx","triage.ts","serviceWorker.ts","index.tsx"],"names":["emoji","cosmetic","low","medium","high","critical","App","React","useState","impact","setImpact","customers","setCustomers","severity","triage","severityString","includes","onChange","setter","e","newValue","parseFloat","currentTarget","value","spacing","inputMode","max","min","name","type","label","pattern","className","margins","href","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+NAeMA,EAAmC,CACvCC,SAAU,eACVC,IAAK,eACLC,OAAQ,eACRC,KAAM,eACNC,SAAU,gBA6EGC,EA1EH,WAAoB,IAAD,EACDC,IAAMC,WADL,mBACtBC,EADsB,KACdC,EADc,OAEKH,IAAMC,WAFX,mBAEtBG,EAFsB,KAEXC,EAFW,KAIvBC,ECSc,SAACJ,EAAgBE,GACrC,OAAIF,EAAS,GAAW,WACpBA,EAAS,IAAME,EAAY,GAAW,MAEvCF,EAAS,IAAME,EAAY,IAC3BF,EAAS,IAAME,EAAY,IAC3BF,EAAS,GACH,SACLA,EAAS,IAAMA,GAAS,IAAME,GAAa,KAC5CF,GAAU,IAAME,GAAa,OAC5BA,GAAa,IAAMF,GAAU,IACvB,OACH,WDrBUK,CAAOL,GAAU,EAAGE,GAAa,GAE5CI,EAAc,UAAMF,GAAN,OAAkB,CAAC,WAAY,YAAYG,SAASH,GAA0B,GAAd,aAE9EI,EAAW,SACfC,GADe,OAEZ,SAACC,GACJ,IAAMC,EAAWC,WAAWF,EAAEG,cAAcC,OAAS,MAChD,GAAKH,GAAYA,GAAY,MAASA,IAAUF,EAAOE,KAG9D,OACE,oCACE,kBAAC,IAAD,MACA,kBAAC,IAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAMI,QAAS,IACb,kBAAC,IAAD,KACE,kBAAC,IAAD,yBAIF,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEC,UAAW,UACXC,IAAK,IACLC,IAAK,EACLC,KAAM,YACNX,SAAUA,EAASL,GACnBiB,KAAM,SACNN,MAAOZ,EACPmB,MAAO,gDAGX,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEL,UAAW,UACXC,IAAK,IACLC,IAAK,EACLC,KAAM,SACNX,SAAUA,EAASP,GACnBqB,QAAS,UACTF,KAAM,SACNN,MAAOd,EACPqB,MAAO,wFAIRnB,GAAaF,EACV,kBAAC,IAAD,KACA,kBAAC,IAAD,CAAWuB,UAAS,iBAAYnB,IAC7Bb,EAAMa,GADT,0BAC0C,2BAAIE,GAD9C,SAIA,KAEN,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAWkB,SAAS,EAAOD,UAAW,UAAtC,cACa,kBAAC,IAAD,CAAME,KAAM,qCAAZ,SADb,eAEsB,kBAAC,IAAD,CAAMA,KAAK,kEAAX,iCE1EdC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDkIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.cdf161e0.chunk.js","sourcesContent":["import React from 'react'\nimport './App.css'\nimport {triage, Triage} from './triage'\nimport {\n  CSSVariables,\n  GlobalStyles,\n  Grid,\n  GridItem,\n  Header,\n  Input,\n  Link,\n  Page,\n  Paragraph,\n} from '@chadlavi/clear'\n\nconst emoji: {[key in Triage]: string} = {\n  cosmetic: '🙃',\n  low: '🤔',\n  medium: '🙁',\n  high: '😫',\n  critical: '🥵',\n}\n\nconst App = (): JSX.Element => {\n  const [impact, setImpact] = React.useState<number|undefined>()\n  const [customers, setCustomers] = React.useState<number|undefined>()\n\n  const severity = triage(impact || 0, customers || 0)\n\n  const severityString = `${severity}${!['cosmetic', 'critical'].includes(severity) ? ' priority' : ''}`\n\n  const onChange = (\n    setter: React.Dispatch<React.SetStateAction<number|undefined>>\n  ) => (e: React.ChangeEvent<HTMLInputElement>): void => {\n    const newValue = parseFloat(e.currentTarget.value || '0')\n    if ((0 <= newValue && newValue <= 100) || !newValue) setter(newValue)\n  }\n\n  return (\n    <>\n      <CSSVariables/>\n      <GlobalStyles/>\n      <Page>\n        <Grid spacing={16}>\n          <GridItem>\n            <Header>\n              Bug prioritizer\n            </Header>\n          </GridItem>\n          <GridItem>\n            <Input\n              inputMode={'decimal'}\n              max={100}\n              min={0}\n              name={'customers'}\n              onChange={onChange(setCustomers)}\n              type={'number'}\n              value={customers}\n              label={'What percentage of users does this impact?'}\n            />\n          </GridItem>\n          <GridItem>\n            <Input\n              inputMode={'decimal'}\n              max={100}\n              min={0}\n              name={'impact'}\n              onChange={onChange(setImpact)}\n              pattern={'[0-9.]*'}\n              type={'number'}\n              value={impact}\n              label={'On a scale of 1 to 100, how much does prevent an affected user from using the app?'}\n            />\n          </GridItem>\n          {\n            (customers && impact)\n              ? <GridItem>\n                <Paragraph className={`result ${severity}`}>\n                  {emoji[severity]} Sounds like this is a <u>{severityString}</u> bug\n                </Paragraph> \n              </GridItem>\n              : null\n          }\n          <GridItem>\n            <Paragraph margins={false} className={'footer'}>\n              Built with <Link href={'https://chadlavi.github.io/clear/'}>Clear</Link>\n              &nbsp;&middot;&nbsp;<Link href='https://github.com/chadlavi/severity/blob/master/src/triage.ts'>How is\n              this calculated?</Link>\n            </Paragraph>\n          </GridItem>\n        </Grid>\n      </Page>\n      \n    </>\n  )\n}\n\nexport default App\n","export type Triage = 'cosmetic' | 'low' | 'medium' | 'high' | 'critical'\n\n/**\n * triages a bug based on the percentage of customers affeced, and the\n * severity of the impact on any given affected customers.\n * \n * A chart of how this is calculated:\n * \n * ```\n *   100% +-------------------------------------------------------+\n *        |                       critical                        |\n *    90% +-------------+---------------------------+             |\n *        |             |                           |             |\n *        |             |           high            |             |\n *        |             |                           |             |\n *    75% +             +-------------+             +-------------+\n *        |                           |                           |\n *        |                           |                           |\n *  i     |                           |                           |\n *  m     |                           |                           |\n *  p 50% +                           +---------------------------+\n *  a     |                                                       |\n *  c     |                                                       |\n *  t     |                        medium                         |\n *        |                                                       |\n *    25% +-------------+                                         |\n *        |             |                                         |\n *        |     low     |                                         |\n *        |             |                                         |\n *    10% +-------------+-----------------------------------------+\n *        |                       cosmetic                        |\n *     0% +-------------+-------------+-------------+-------------+\n *        0%            25%           50%           75%        100%\n *                            customers impacted\n * ```\n */\nexport const triage = (impact: number, customers: number): Triage => {\n  if (impact < 10) return 'cosmetic'\n  if (impact < 25 && customers < 25) return 'low'\n  if (\n    (impact < 90 && customers < 25) ||\n    (impact < 75 && customers < 50) ||\n    (impact < 50)\n  ) return 'medium'\n  if (impact < 90 && impact >=50 && customers >= 25 && (\n    (impact >= 75 || customers >= 50) &&\n    !(customers >= 75 && impact >= 75)\n  )) return 'high'\n  return 'critical'\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}